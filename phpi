#!/usr/bin/env php -q
<?php

if (function_exists('readline'))
{
	$readline_func = 'readline';
	$history_func = 'readline_add_history';
}
else
{
	function read_line($prompt)
	{
		echo "$prompt ";
		if (feof(STDIN))
			return "die";
		return rtrim(fgets(STDIN));
	}

	function add_history($line)
	{
		return false;
	}

	fprintf(STDERR, "warning: readline not available\n");

	$readline_func = 'read_line';
	$history_func = 'add_history';
}

class object
{
	var $attributes;

	function __construct()
	{
		$this->attributes = array();
	}

	function __get($varname)
	{
		return $this->attributes[$varname];
	}
	
	function __set($varname, $newval)
	{
		$this->attributes[$varname] = $newval;
	}

	function __call($method, $args)
	{
		switch ($method)
		{
			case 'get':
				$m = array();
				foreach ($args as $value)
				{
					$m[$value] = $this->attributes[$value];
				}
				return $m;
				break;
			default:
				return $this->attributes[$method];
		}
	}
}

function handle_error($errno, $errstr, $errfile, $errline)
{
	echo "ERROR $errno: $errstr\n";
	echo "    -> $errfile:$errline\n";
}

set_error_handler('handle_error');

$item = new object;
$killflag = false;
$_SERVER['HTTP_USER_AGENT'] = 'phpi';
$prompt = basename($_SERVER['PHP_SELF']) . '!' . get_current_user() . '$';
while ($killflag == false)
{
	if ($std = $readline_func($prompt))
	{
		if ($std == 'die')
			$killflag = true;
		else
		{
			$history_func($std);
			eval($std . ';');
		}
	}
}

?>
